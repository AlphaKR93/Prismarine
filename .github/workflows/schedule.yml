name: Scheduled Upstream

on:
  push:
  workflow_dispatch:
  schedule:
    - cron: "*/15 * * * *"

env:
  paper: https://github.com/PaperMC/Paper
  puff: https://github.com/pufferfish-gg/Pufferfish
  purp: https://github.com/PurpurMC/Purpur.git
  pris: https://github.com/PrismarineTeam/Prismarine.git

  papb: master
  pufb: ver/1.18
  purb: ver/1.18.1
  prib: ver/1.18.1

jobs:
  check:
    name: Check Upstreams
    if: "!contains(github.event.commits[0].message, '[ci-skip]')"
    runs-on: ubuntu-20.04
    outputs:
      upstream: ${{ steps.check-paper.outputs.upstream }}
      paper: ${{ steps.check-paper.outputs.paper }}
      pufferfish: ${{ steps.check-pufferfish.outputs.pufferfish }}
      purpur: ${{ steps.check-purpur.outputs.purpur }}
      beforepaper: ${{ steps.check-paper.outputs.before }}
      beforepufferfish: ${{ steps.check-pufferfish.outputs.before }}
      beforepurpur: ${{ steps.check-purpur.outputs.before }}
    steps:
      - uses: actions/checkout@v2

      - name: Clone Repository
        run: |
          git clone --recursive -b ${{ env.prib }} ${{ env.pris }}
      
      - name: Check Paper Commit
        id: check-paper
        run: |
          upstream=$(git ls-remote ${{ env.paper }} | grep master | cut -f 1)
          current=$(cat Prismarine/gradle.properties | grep paperCommit | sed 's/paperCommit = //')
          if [ "$current" != "$upstream" ]; then paper=true; fi
          echo "::set-output name=paper::$paper"
          echo "::set-output name=upstream::$upstream"
          echo "::set-output name=before::$current"
          echo $paper

      - name: Check Pufferfish Commit
        id: check-pufferfish
        run: |
          upstream=$(git ls-remote ${{ env.puff }} | grep ver/1.18 | cut -f 1)
          current=$(cat Prismarine/patches/api/0001-Pufferfish-API-Changes.patch | grep "Pufferfish Commit" | sed 's/Pufferfish Commit: //')
          if [ "$current" != "$upstream" ]; then pufferfish=true; fi
          echo "::set-output name=pufferfish::$pufferfish"
          echo "::set-output name=before::$current"
      
      - name: Check Purpur Commit
        id: check-purpur
        run: |
          upstream=$(git ls-remote ${{ env.purp }} | grep ver/1.18.1 | cut -f 1)
          current=$(cat Prismarine/patches/api/0002-Purpur-API-Changes.patch | grep "Purpur Commit" | sed 's/Purpur Commit: //')
          if [ "$current" != "$upstream" ]; then purpur=true; fi
          echo "::set-output name=purpur::$purpur"
          echo "::set-output name=before::$current"

  upstream-paper:
    name: Upstream Paper
    runs-on: ubuntu-20.04
    needs: check
    if: needs.check.outputs.paper == 'true'
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v2
        with:
          distribution: microsoft
          java-version: 17.0.1

      - name: Configure Git
        run: |
          git config --global user.email "alphakr93@outlook.com" && git config --global user.name "AlphaKR93"
          git clone --recursive -b ${{ env.prib }} ${{ env.pris }}

      - name: Update Upstream
        run: |
          cd Prismarine
          upstream=${{ env.upstream }}
          sed -i 's/paperCommit = .*/paperCommit = '"$upstream"'/' gradle.properties
          ./gradlew applyPatches --stacktrace && ./gradlew build --stacktrace
      
      - name: Rebuild Patches
        run: | 
          cd Prismarine
          ./gradlew rebuildPatches

      - name: Commit Changes
        run: |
          git config --global user.email "actions@github.com" && git config --global user.name "Github Actions"
          paper=$(curl -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/PaperMC/Paper/compare/${{ env.current }}...HEAD | jq -r '.commits[] | "PaperMC/Paper@\(.sha[:7]) \(.commit.message | split("\r\n")[0] | split("\n")[0])"')
          log="Updated Upstream (Paper)\n\nUpstream has released updates that appear to apply and compile correctly\n\nPaper Changes:\n$paper"
          echo -e "$log" | git commit -F -

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.PUSH_TOKEN }}
          directory: ./Prismarine
          repository: PrismarineTeam/Prismarine

  # upstream-pufferfish:
  #   name: Upstream Pufferfish
  #   runs-on: ubuntu-20.04
  #   needs: check
  #   if: needs.check.outputs.pufferfish == 'true' && !(needs.check.outputs.purpur == 'true')
  #   steps:
  #     - uses: actions/checkout@v2

  #     - uses: actions/setup-java@v2
  #       with:
  #         distribution: microsoft
  #         java-version: 17.0.1

  #     - name: Configure Git
  #       run: |
  #         git config --global user.email "alphakr93@outlook.com" && git config --global user.name "AlphaKR93"

  #     - name: Initial MC Dev Sources
  #       run: |
  #         git clone --recursive -b ${{ env.papb }} ${{ env.paper }}
  #         cd Paper/
  #         paper=$(git log -1 --pretty=oneline | cut -c 1-40)
  #         ./gradlew applyPatches --stacktrace
  #         cd Pufferfish/.gradle/caches/paperweight/upstreams/paper/Paper-Server
  #         cp -rf .gradle/caches/paperweight/mc-dev-sources/net/* src/main/java/net
  #         git add .
  #         git commit -m "Initial"

  #     - name: Initial Pufferfish Sources
  #       run: |
  #         git clone --recursive -b ${{ env.pufb }} ${{ env.puff }}
  #         cd Pufferfish/
  #         pufferfish=$(git log -1 --pretty=oneline | cut -c 1-40) && echo "pufferfish=$pufferfish" > $GITHUB_ENV
  #         upstream=${{ env.upstream }}
  #         sed -i 's/paperRef=.*/paperRef='"$upstream"'/' gradle.properties
  #         ./gradlew applyPatches --stacktrace
      
  #     - name: Pufferfish Server Changes
  #       run: |
  #         cd Pufferfish/pufferfish-server/
  #         rm -rdf .git
  #         cp -rf .gradle/caches/paperweight/mc-dev-sources/net/* src/main/java/net
  #         mv -f ../.gradle/caches/paperweight/upstreams/paper/Paper-Server/.git ./
  #         git add .
  #         git commit -m "Pufferfish Server Changes" -m "Pufferfish Commit: ${{ env.pufferfish }}"

  #     - name: Pufferfish API Changes
  #       run: |
  #         cd Pufferfish/pufferfish-api
  #         rm -rdf .git
  #         mv -f ../.gradle/caches/paperweight/upstreams/paper/Paper-API/.git ./
  #         git add .
  #         git commit -m "Pufferfish API Changes" -m "Pufferfish Commit: ${{ env.pufferfish }}"

  #     - name: Build Patches
  #       run: |
  #         git clone --recursive -b ${{ env.prib }} ${{ env.pris }}
  #         cd Pufferfish/
  #         ./gradlew rebuildPatches
  #         cp -rf patches/api/*-Pufferfish-API-Changes.patch ../Prismarine/patches/api/0001-Pufferfish-API-Changes.patch
  #         cp -rf patches/server/*-Pufferfish-Server-Changes.patch ../Prismarine/patches/server/0001-Pufferfish-Server-Changes.patch
          
  #     - name: 'Upload Initial Artifact'
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: Artifacts - Initial
  #         path: |
  #           Pufferfish/patches
  #           Prismarine/patches
          
  #     - name: Upstream Paper
  #       if: needs.check.outputs.paper == 'true'
  #       run: |
  #         cd Prismarine/
  #         upstream=${{ env.upstream }}
  #         sed -i 's/paperCommit = .*/paperCommit = '"$upstream"'/' gradle.properties
      
  #     - name: Rebuild Patches
  #       run: |
  #         cd Prismarine/
  #         ./gradlew applyPatches --stacktrace
  #         ./gradlew build --stacktrace
  #         ./gradlew rebuildPatches --stacktrace

  #     - name: Commit changes
  #       run: |
  #         git config --global user.email "actions@github.com" && git config --global user.name "Github Actions"
  #         if [ "${{ needs.check.outputs.paper }}" == "true" ]; then
  #           echo "Paper"
  #           upstream="Paper"
  #           commit=$(curl -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/PaperMC/Paper/compare/${{ needs.check.outputs.beforepaper }}...HEAD | jq -r '.commits[] | "PaperMC/Paper@\(.sha[:7]) \(.commit.message | split("\r\n")[0] | split("\n")[0])"')
  #           log="$log\n\nPaper Changes:\n$commit"
  #         fi
          
  #         if [ "${{ needs.check.outputs.pufferfish }}" == "true" ]; then
  #           echo "Pufferfish"
  #           if [ "$upstream" != "" ]; then upstream="$upstream & Pufferfish"; else upstream="Pufferfish"; fi
  #           commit=$(curl -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/pufferfish-gg/Pufferfish/compare/${{ needs.check.outputs.beforepufferfish }}...HEAD | jq -r '.commits[] | "pufferfish-gg/Pufferfish@\(.sha[:7]) \(.commit.message | split("\r\n")[0] | split("\n")[0])"')
  #           log="$log\n\nPufferfish Changes:\n$commit"
  #         fi
          
  #         cd Prismarine/
  #         git add .
  #         log="Update Upstream ($upstream)\n\nUpstream has released updates that appear to apply and compile correctly$log"
          
  #         echo -e $log | git commit -F -
          
  #     - name: 'Upload Final Artifact'
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: Artifacts - Final
  #         path: |
  #           Pufferfish/patches
  #           Prismarine/patches

  #     - name: Push changes
  #       uses: ad-m/github-push-action@master
  #       with:
  #         github_token: ${{ secrets.PUSH_TOKEN }}
  #         directory: ./Prismarine
  #         repository: PrismarineTeam/Prismarine

  # upstream-purpur:
  #   name: Upstream Purpur
  #   runs-on: ubuntu-20.04
  #   needs: check
  #   if: needs.check.outputs.purpur == 'true' && !(needs.check.outputs.pufferfish == 'true')
  #   steps:
  #     - uses: actions/checkout@v2

  #     - uses: actions/setup-java@v2
  #       with:
  #         distribution: microsoft
  #         java-version: 17.0.1

  #     - name: Configure Git
  #       run: |
  #         git config --global user.email "alphakr93@outlook.com" && git config --global user.name "AlphaKR93"

  #     - name: Initial Pufferfish Sources
  #       run: |
  #         git clone --recursive -b ${{ env.pufb }} ${{ env.puff }}
  #         cd Pufferfish/
  #         pufferfish=$(git log -1 --pretty=oneline | cut -c 1-40) && echo "pufferfish=$pufferfish" > $GITHUB_ENV
  #         upstream=${{ env.upstream }}
  #         sed -i 's/paperRef=.*/paperRef='"$upstream"'/' gradle.properties
  #         ./gradlew applyPatches --stacktrace

  #     - name: MC Dev Sources
  #       run: |
  #         cd Pufferfish/.gradle/caches/paperweight/upstreams/paper/Paper-Server
  #         cp -rf .gradle/caches/paperweight/mc-dev-sources/net/* src/main/java/net
  #         git add .
  #         git commit -m "Initial"
      
  #     - name: Pufferfish Server Changes
  #       run: |
  #         cd Pufferfish/pufferfish-server/
  #         rm -rdf .git
  #         cp -rf .gradle/caches/paperweight/mc-dev-sources/net/* src/main/java/net
  #         mv -f ../.gradle/caches/paperweight/upstreams/paper/Paper-Server/.git ./
  #         git add .
  #         git commit -m "Pufferfish Server Changes" -m "Pufferfish Commit: ${{ env.pufferfish }}"

  #     - name: Pufferfish API Changes
  #       run: |
  #         cd Pufferfish/pufferfish-api
  #         rm -rdf .git
  #         mv -f ../.gradle/caches/paperweight/upstreams/paper/Paper-API/.git ./
  #         git add .
  #         git commit -m "Pufferfish API Changes" -m "Pufferfish Commit: ${{ env.pufferfish }}"

  #     - name: Initial Purpur Sources
  #       run: |
  #         git clone --recursive -b ${{ env.purb }} ${{ env.purp }}
  #         cd Purpur/
  #         purpur=$(git log -1 --pretty=oneline | cut -c 1-40) && echo "purpur=$purpur" > $GITHUB_ENV
  #         upstream=${{ env.upstream }}
  #         sed -i 's/paperCommit = .*/paperCommit = '"$upstream"'/' gradle.properties
  #         ./gradlew applyPatches

  #     - name: Purpur Server Changes
  #       run: |
  #         cd Purpur/Purpur-Server/
  #         rm -rdf .git
  #         cp -rf .gradle/caches/paperweight/mc-dev-sources/net/* src/main/java/net
  #         mv -f ../../Pufferfish/pufferfish-server/.git ./
  #         git add .
  #         git commit -m "Purpur Server Changes" -m "Purpur Commit: ${{ env.purpur }}"

  #     - name: Purpur API Changes
  #       run: |
  #         cd Purpur/Purpur-API/
  #         rm -rdf .git
  #         mv -f ../../Pufferfish/pufferfish-api/.git ./
  #         git add .
  #         git commit -m "Purpur API Changes" -m "Purpur Commit: ${{ env.purpur }}"

  #     - name: Build Patches
  #       run: |
  #         git clone --recursive -b ${{ env.prib }} ${{ env.pris }}
  #         cd Purpur/
  #         ./gradlew rebuildPatches
  #         cp -rf patches/api/*-Purpur-API-Changes.patch ../Prismarine/patches/api/0002-Purpur-API-Changes.patch
  #         cp -rf patches/server/*-Purpur-Server-Changes.patch ../Prismarine/patches/server/0002-Purpur-Server-Changes.patch
          
  #     - name: 'Upload Initial Artifact'
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: Artifacts - Initial
  #         path: |
  #           Purpur/patches
  #           Prismarine/patches
          
  #     - name: Upstream Paper
  #       if: needs.check.outputs.paper == 'true'
  #       run: |
  #         cd Prismarine/
  #         upstream=${{ env.upstream }}
  #         sed -i 's/paperCommit = .*/paperCommit = '"$upstream"'/' gradle.properties
      
  #     - name: Rebuild Patches
  #       run: |
  #         cd Prismarine/
  #         ./gradlew applyPatches --stacktrace
  #         ./gradlew build --stacktrace
  #         ./gradlew rebuildPatches --stacktrace

  #     - name: Commit changes
  #       run: |
  #         git config --global user.email "actions@github.com" && git config --global user.name "Github Actions"
  #         if [ "${{ needs.check.outputs.paper }}" == "true" ]; then
  #           upstream="Paper"
  #           commit=$(curl -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/PaperMC/Paper/compare/${{ needs.check.outputs.beforepaper }}...HEAD | jq -r '.commits[] | "\nPaperMC/Paper@\(.sha[:7]) \(.commit.message | split("\r\n")[0] | split("\n")[0])"')
  #           log="$log\n\nPaper Changes:\n$commit"
  #         fi
          
  #         if [ "${{ needs.check.outputs.purpur }}" == "true" ]; then
  #           if [ "$upstream" != "" ]; then upstream="$upstream & Purpur"; else upstream="Purpur"; fi
  #           commit=$(curl -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/PurpurMC/Purpur/compare/${{ needs.check.outputs.beforepurpur }}...HEAD | jq -r '.commits[] | \n"PurpurMC/Purpur@\(.sha[:7]) \(.commit.message | split("\r\n")[0] | split("\n")[0])"')
  #           log="$log\n\nPurpur Changes:\n$commit"
  #         fi
          
  #         cd Prismarine/
  #         git add .
  #         log="Update Upstream ($upstream)\n\nUpstream has released updates that appear to apply and compile correctly$log"
          
  #         echo -e $log | git commit -F -
          
  #     - name: 'Upload Final Artifact'
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: Artifacts - Final
  #         path: |
  #           Purpur/patches
  #           Prismarine/patches

  #     - name: Push changes
  #       uses: ad-m/github-push-action@master
  #       with:
  #         github_token: ${{ secrets.PUSH_TOKEN }}
  #         directory: ./Prismarine
  #         repository: PrismarineTeam/Prismarine
