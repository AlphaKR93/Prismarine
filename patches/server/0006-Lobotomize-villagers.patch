From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Alpha <alphakr93@outlook.com>
Date: Thu, 20 Jan 2022 09:59:34 +0900
Subject: [PATCH] Lobotomize villagers


diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index 9755517f0c1d66db5bfd00946114fab5db6776d6..90ab67d6dcbd3961fcaa05b034a6d35e7fd096b6 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -141,6 +141,8 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
 
     public long nextGolemPanic = -1; // Pufferfish
 
+    boolean lobotomized = false; // Prismarine
+
     public Villager(EntityType<? extends Villager> entityType, Level world) {
         this(entityType, world, VillagerType.PLAINS);
     }
@@ -198,6 +200,24 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     }
     // Purpur end
 
+    // Prismarine start
+    private boolean isLobotomized() {
+        if ((level.getGameTime() + brainTickOffset) % level.prismarineConfig.villagerLobotomizeCheckInterval == 0) {
+            this.lobotomized = !canTravelFrom(blockPosition().above());
+        }
+        return this.lobotomized;
+    }
+
+    private boolean canTravelFrom(BlockPos pos) {
+        return canTravelTo(pos.north()) || canTravelTo(pos.east()) || canTravelTo(pos.south()) || canTravelTo(pos.west());
+    }
+
+    private boolean canTravelTo(BlockPos pos) {
+        net.minecraft.world.level.pathfinder.Path to = navigation.createPath(pos, 0);
+        return to != null && to.nodes.size() > 0;
+    }
+    // Prismarine end
+
     @Override
     public Brain<Villager> getBrain() {
         return (Brain<Villager>) super.getBrain(); // CraftBukkit - decompile error
@@ -293,6 +313,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     protected void customServerAiStep() { mobTick(false); }
     protected void mobTick(boolean inactive) {
         this.level.getProfiler().push("villagerBrain");
+        if (level.prismarineConfig.villagerLobotomized) inactive = inactive || isLobotomized(); // Prismarine
         // Pufferfish start
         if (!inactive) {
             // Purpur start
@@ -303,6 +324,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
             this.getBrain().tick((ServerLevel) this.level, this); // Paper
          }
         // Pufferfish end
+        else if (shouldRestock()) restock(); // Prismarine
         this.level.getProfiler().pop();
         if (this.assignProfessionWhenSpawned) {
             this.assignProfessionWhenSpawned = false;
diff --git a/src/main/java/net/prismarineteam/prismarine/PrismarineWorldConfig.java b/src/main/java/net/prismarineteam/prismarine/PrismarineWorldConfig.java
index 74020515e2ec917b7d921aa8501a71ff433a6abb..10c3b105adfd91f8b1f21caed0aaee12ee043d03 100644
--- a/src/main/java/net/prismarineteam/prismarine/PrismarineWorldConfig.java
+++ b/src/main/java/net/prismarineteam/prismarine/PrismarineWorldConfig.java
@@ -75,4 +75,11 @@ public class PrismarineWorldConfig {
         final Map<String, Object> value = PrismarineConfig.getMap("world-settings." + worldName + "." + path, null);
         return value.isEmpty() ? fallback : value;
     }
+
+    public boolean villagerLobotomized = false;
+    public int villagerLobotomizeCheckInterval = 60;
+    private void villagerSettings() {
+        villagerLobotomized = getBoolean("mobs.villager.lobotomize.enabled", villagerLobotomized);
+        villagerLobotomizeCheckInterval = getInt("mobs.villager.lobotomize.check-interval", villagerLobotomizeCheckInterval);
+    }
 }
\ No newline at end of file
